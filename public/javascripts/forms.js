(function(){"use strict";var ConditionalControl,OptionalControl,OtherCountryFields,MarkSelected,Autocomplete,autocompletes,PostcodeLookup,monitorRadios,BackButton,root=this,$=root.jQuery,GOVUK=root.GOVUK,countries=GOVUK.registerToVote.countries,ENTER=13,message=GOVUK.registerToVote.messages;BackButton=function(elm){elm&&(this.$header=$(elm),this.setup(),this.bindEvents())},BackButton.prototype.setup=function(){this.$link=$('<a class="back-to-previous" href="#">'+message("back_button")+' <span class="visuallyhidden"> '+message("back_button_non_visual")+"</span></a>"),this.$header.before(this.$link),this.$header.removeClass("no-back-link")},BackButton.prototype.bindEvents=function(){this.$link.on("click",function(e){return e.preventDefault(),root.history.back(),!1})},ConditionalControl=function(){GOVUK.registerToVote.ToggleObj.apply(this,arguments)},$.extend(ConditionalControl.prototype,new GOVUK.registerToVote.ToggleObj),ConditionalControl.prototype.setup=function(){var _bindControlAndContentMargins,contentId=this.$content.attr("id"),loadedState="hidden",_this=this;return _bindControlAndContentMargins=function(){var $controlWrapper=_this.$toggle.parent(".selectable"),$contentValidation=_this.$content.parent(".validation-wrapper"),$control=$controlWrapper.length?$controlWrapper:_this.$toggle,$content=$contentValidation.length?$contentValidation:_this.$content;-1!==$control.siblings().index($content)&&(_this.controlAndContentAreSiblings=!0,_this.marginWhenContentIs={shown:$control.css("margin-bottom"),hidden:$content.css("margin-bottom")})},this.$toggle=document.getElementById(this.$content.data("condition")),null===this.$toggle?!1:(this.$toggle=$(this.$toggle),contentId&&this.$toggle.attr("aria-controls",contentId),_bindControlAndContentMargins(),this.$content.hasClass(this.toggleClass)&&(loadedState="shown"),this.adjustVerticalSpace(loadedState),this.$toggle.is(":checked")&&this.toggle(),!0)},ConditionalControl.prototype.bindEvents=function(){var _this=this,toggleName=this.$toggle.attr("name");this.$toggle.on("change",function(){_this.toggle()}),"radio"===this.$toggle.attr("type")&&$(document).on("radio:"+toggleName,function(e,data){_this.toggle(data.selectedControl)})},ConditionalControl.prototype.adjustVerticalSpace=function(content){var $controlWrapper=this.$toggle.parent(".selectable"),$control=$controlWrapper.length?$controlWrapper:this.$toggle;this.controlAndContentAreSiblings&&("hidden"===content?$control.css("margin-bottom",this.marginWhenContentIs.hidden):$control.css("margin-bottom",this.marginWhenContentIs.shown))},ConditionalControl.prototype.toggle=function(selectedControl){var _hideContent,_showContent,$postcodeSearch=this.$content.find(".postcode"),isPostcodeLookup=$postcodeSearch.length>0,hasAddresses=$("#found-addresses select").length>0,_this=this;_hideContent=function(){_this.$content.removeClass(_this.toggleClass),_this.$content.attr({"aria-hidden":!0,"aria-expanded":!1})},_showContent=function(){_this.$content.addClass(_this.toggleClass),_this.$content.attr({"aria-hidden":!1,"aria-expanded":!0})},void 0!==selectedControl?this.$toggle.attr("id")!==selectedControl.id&&(_hideContent(),this.adjustVerticalSpace("hidden"),$("#continue").show()):this.$toggle.is(":checked")?(_showContent(),this.adjustVerticalSpace("shown"),$(document).trigger("toggle.open",{$toggle:this.$toggle}),isPostcodeLookup&&!hasAddresses&&$("#continue").hide()):(_hideContent(),this.adjustVerticalSpace("hidden"),$(document).trigger("toggle.closed",{$toggle:this.$toggle}),$("#continue").show())},OptionalControl=function(elm){this.controlText=$(elm).data("controlText"),this.controlId=$(elm).data("controlId"),this.controlName=$(elm).data("controlName"),this.controlValue=$(elm).data("controlValue"),this.controlClasses=$(elm).data("controlClasses"),this.controlAttributes=$(elm).data("controlAttributes").replace(/'/g,""),GOVUK.registerToVote.ConditionalControl.apply(this,arguments)},$.extend(OptionalControl.prototype,ConditionalControl.prototype),OptionalControl.prototype.setup=function(){var setupResult,$content=this.$content,$validationWrapper=this.$content.parent(".validation-wrapper"),contentHasEntry=!1;return $validationWrapper.length&&($content=$validationWrapper),this.$control=$(this.createControl()),this.$control.insertBefore($content),$.each(this.$content.find('input[type="text"]'),function(){return""!==this.value?(contentHasEntry=!0,!1):void 0}),setupResult=GOVUK.registerToVote.ConditionalControl.prototype.setup.call(this),contentHasEntry&&(this.$toggle.attr("checked","checked"),this.toggle()),setupResult},OptionalControl.prototype.createControl=function(){var template='<label class="selectable"><input type="checkbox" id="{{controlId}}" name="{{controlName}}" value="{{controlValue}}" class="{{controlClasses}}" {{controlAttributes}} />{{controlText}}</label>';return Mustache.render(template,{controlText:this.controlText,controlId:this.controlId,controlName:this.controlName,controlValue:this.controlValue,controlClasses:this.controlClasses,controlAttributes:this.controlAttributes})},OptionalControl.prototype.bindEvents=function(){GOVUK.registerToVote.ConditionalControl.prototype.bindEvents.call(this)},OtherCountryFields=function(elm){this.$container=$(elm),Mustache.parse(this.templates.country),this.setup()},OtherCountryFields.prototype.templates={country:'<div class="added-country"><label for="{{id}}" class="country-label" >{{#countryFieldName}}{{idx}}{{/countryFieldName}}</label>{{#remove-link}}{{idx}}{{/remove-link}}<div class="validation-wrapper"><input type="text" id="{{id}}" name="{{name}}" value="{{value}}" autocomplete="off" class="text country-autocomplete long validate" data-validation-name="{{data-validation-name}}" data-validation-type="field" data-validation-rules="nonEmpty validCountry"></div></div>',removeLink:'<a href="#" class="remove-field" data-field="{{id}}">{{#countryFieldRemoveText}}{{idx}}{{/countryFieldRemoveText}}</a>',addAnotherLink:'<a href="" class="duplicate-control">'+message("ordinary_nationality_AddAnotherCountry")+"</a>",dummy:'<input type="hidden" value="" name="{{name}}" />'},OtherCountryFields.prototype.getRemoveLink=function(idx){var lambda,id=this.getFieldId(idx),fragment=this.templates.removeLink,getCountryFieldRemoveText=this.getCountryFieldRemoveText;return lambda=function(){return function(){return Mustache.render(fragment,{id:id,idx:idx,countryFieldRemoveText:getCountryFieldRemoveText})}}},OtherCountryFields.prototype.setup=function(){var $countries=this.$container.find(".added-country");this.getCountries($countries),this.$addAnotherLink=$(this.templates.addAnotherLink),this.$container.append(this.$addAnotherLink),this.bindEvents()},OtherCountryFields.prototype.getCountries=function($countries){{var _this=this;$countries.length}this.countries=[],$countries.each(function(idx,elm){var countryValue=$(elm).find("input.country-autocomplete").val();""!==countryValue&&_this.countries.push(countryValue)}),this.countries.length||this.countries.push(""),this.addCountryElements()},OtherCountryFields.prototype.removeEmptyCountry=function(country){var $country=$(country),isEmpty=""===$country.find("input.country-autocomplete").val();return isEmpty&&$country.remove(),isEmpty},OtherCountryFields.prototype.bindEvents=function(){var _this=this;this.$container.on("click",function(e){return _this.handleClicks(e),!1}),$(document).bind("contentUpdate",function(evt,eData){eData.context[0]===_this.$container[0]&&_this.updateValidation(evt.type,eData.context)})},OtherCountryFields.prototype.updateValidation=function(evt,$elm){var containerValidationName=$elm.data("validationName"),containerValidationObj=GOVUK.registerToVote.validation.fields.getNames([containerValidationName])[0],countryValidationNames=[];$.each(containerValidationObj.children,function(idx,child){GOVUK.registerToVote.validation.fields.remove(child)}),$elm.find(".validate").each(function(idx,elm){var $elm=$(elm);GOVUK.registerToVote.validation.fields.add($elm),countryValidationNames.push($elm.data("validationName"))}),containerValidationObj.children=countryValidationNames},OtherCountryFields.prototype.handleClicks=function(evt){var $target=$(evt.target);$target.hasClass("duplicate-control")&&this.addCountry(),$target.hasClass("remove-field")&&this.removeCountry($target)},OtherCountryFields.prototype.getFieldId=function(idx){return"nationality_otherCountries["+idx+"]"},OtherCountryFields.prototype.getFieldName=function(idx){return"nationality.otherCountries["+idx+"]"},OtherCountryFields.prototype.getValidationName=function(idx){return"added-country-"+idx},OtherCountryFields.prototype.getIndexFromId=function(id){var match=id.match(/\[(\d+)\]$/);return null!==match?match[1]:!1},OtherCountryFields.prototype.getCountryFieldName=function(){var keys=["whichCountry","secondCountry","thirdCountry"];return function(indexStr,render){var idx=parseInt(render(indexStr),10);return message("ordinary_nationality_"+keys[idx])}},OtherCountryFields.prototype.getCountryFieldRemoveText=function(){var keys=["removeWhichCountry","removeSecondCountry","removeThirdCountry"];return function(indexStr,render){var idx=parseInt(render(indexStr),10);return message("ordinary_nationality_"+keys[idx])}},OtherCountryFields.prototype.updateCountryValues=function(){var _this=this;this.countries=[],$(".added-country input.country-autocomplete",this.$container).each(function(idx,elm){_this.countries.push($(elm).val())})},OtherCountryFields.prototype.removeCountryValue=function(countryIdx){var countryIdx=parseInt(countryIdx,10);this.countries=$.map(this.countries,function(country,idx){return idx!=countryIdx?country:null})},OtherCountryFields.prototype.makeCountryHTML=function(opts){var newIdx,newCountryData,newValue="",includeLink=!1,_this=this;return void 0===opts?newIdx=this.countries.length:("undefined"!=typeof opts.value&&(newValue=opts.value),"undefined"!=typeof opts.idx&&(newIdx=opts.idx),"undefined"!=typeof opts["include-remove-link"]&&(includeLink=!0)),newCountryData={id:this.getFieldId(newIdx),name:this.getFieldName(newIdx),"data-validation-name":this.getValidationName(newIdx),value:newValue,idx:newIdx,countryFieldName:_this.getCountryFieldName},includeLink&&(newCountryData["remove-link"]=_this.getRemoveLink(newIdx)),Mustache.render(this.templates.country,newCountryData)},OtherCountryFields.prototype.addCountryElements=function(){var dummiesHTML,$holder=$("<div />"),_this=this;this.$container.html(""),$.each(this.countries,function(idx,country){var opts={idx:idx,value:country,"include-remove-link":!0};1===_this.countries.length&&delete opts["include-remove-link"],$holder.append(_this.makeCountryHTML(opts))}),dummiesHTML=this.getDummyFields(),dummiesHTML&&$holder.append(dummiesHTML),this.countries.length<3&&$holder.append(this.$addAnotherLink),this.$container.append($holder.html())},OtherCountryFields.prototype.getDummyFields=function(){var dummyHTML,maxCountries=3,numberOfCountries=this.countries.length,dummiesRequired=maxCountries-numberOfCountries,idx=numberOfCountries,dummyTemplate=Mustache.compile(this.templates.dummy),$holder=$("<div />");if(!dummiesRequired)return!1;for(;maxCountries>idx;)dummyHTML=dummyTemplate({name:this.getFieldName(idx)}),$holder.append(dummyHTML),idx++;return $holder.html()},OtherCountryFields.prototype.addCountry=function(){$(document).trigger("preContentRemoval",{context:this.$container}),this.updateCountryValues(),this.countries.push(""),this.addCountryElements(),$(document).trigger("contentUpdate",{context:this.$container}),document.getElementById(this.getFieldId(this.countries.length-1)).focus()},OtherCountryFields.prototype.removeCountry=function($removeLink){var focusInheritor,idxToRemove=this.getIndexFromId($removeLink.data("field"));idxToRemove&&($(document).trigger("preContentRemoval",{context:this.$container}),this.updateCountryValues(),this.removeCountryValue(idxToRemove),this.addCountryElements(),$(document).trigger("contentUpdate",{context:this.$container}),focusInheritor=document.getElementById(this.getFieldId(idxToRemove-1)),null===focusInheritor&&(focusInheritor=this.$container.find(".added-country input.country-autocomplete")[0]),$(focusInheritor).focus(),$(document).trigger("contentUpdate",{context:this.$container}))},MarkSelected=function(elm){var controlType,_this=this;this.$label=$(elm),this.$control=this.$label.find("input[type=radio], input[type=checkbox]"),controlType=this.$control.attr("type"),"radio"===controlType&&$(document).on("radio:"+this.$control.attr("name"),function(e,data){_this.toggle(data)}),"checkbox"===controlType&&this.$control.on("click",function(){_this.toggle({selectedControl:_this.$control})}),this.$control.is(":checked")&&this.$label.addClass("selected")},MarkSelected.prototype.toggle=function(){var isChecked=this.$control.is(":checked");isChecked?this.$label.addClass("selected"):this.$label.removeClass("selected")},Autocomplete=function($input){this.$input=$input,this.menuIsShowing=!1,this.$input.typeahead({hint:!1,name:"countries",local:countries,template:this.compiledTemplate,engine:Mustache,limit:5})},Autocomplete.prototype.getMenuId=function(){var id=0;return function(){return id+=1,Autocomplete.menuIdPrefix+"-"+id}}(),Autocomplete.menuIdPrefix="typeahead-suggestions",Autocomplete.prototype.compiledStatusText=Mustache.compile("{{results}} {{#describe}}{{results}}{{/describe}} "+message("ordinary_nationality_autocomplete_status")+"."),Autocomplete.prototype.compiledTemplate=Mustache.compile('<p role="presentation" id="{{name}}">{{value}}</p>'),Autocomplete.prototype.updateStatus=function(suggestions){var statusText;suggestions.length>0&&(statusText=this.compiledStatusText({results:suggestions.length,describe:function(){return function(){return message(this.results>1?"ordinary_nationality_autocomplete_status_prefix_multiple":"ordinary_nationality_autocomplete_status_prefix_singular")}}}),this.$status.text(statusText))},Autocomplete.prototype.events={onInitialized:function(e){var AutocompleteObj=this.getAutocompleteObj($(e.target)),menuId=this.getMenuId();this.$menu=this.$input.parent().find(".tt-dropdown-menu"),this.$status=$('<span role="status" aria-live="polite" class="typeahead-status visuallyhidden" />'),this.$status.insertAfter(this.$input),this.$input.attr({"aria-Autocomplete":"list","aria-haspopup":menuId}),this.lastInputValue=this.$input.val(),this.$menu.css("width",this.$input.innerWidth()+"px").attr("id",menuId),this.$input.on("keydown",function(e){{var keypressed=e.which;$(this).val()}return keypressed===ENTER?AutocompleteObj.events.onEnter.call(AutocompleteObj,e):!0})},onMenuOpen:function(){this.menuIsShowing=!0},onMenuClosed:function(){this.menuIsShowing=!1},onMoveTo:function(e,countryObj){var idOfSelected=null!==countryObj?countryObj.value:"";this.$input.attr("aria-activedescendant",idOfSelected)},onEnter:function(){return this.menuIsShowing?(this.$menu.hide(),this.menuIsShowing=!1,!1):!0},onUpdate:function(e,suggestions){this.updateStatus(suggestions)}},Autocomplete.prototype.getAutocompleteObj=function($input){return GOVUK.registerToVote.autocompletes.existingObj($input)},autocompletes={$currentInput:null,cache:{},methods:{initialized:"onInitialized",opened:"onMenuOpen",closed:"onMenuClosed",movedto:"onMoveTo",updated:"onUpdate"},existingId:function($input){var inputId=$input.attr("id");return"undefined"!=typeof this.cache[inputId]?inputId:!1},existingObj:function($input){return this.cache[$input.attr("id")]},createEvent:function(eventName){var autocompletesObj=this;return{trigger:function(e){var existingObj=autocompletesObj.existingObj($(e.target)),method=autocompletesObj.methods[eventName];existingObj&&existingObj.events[method].apply(existingObj,arguments)}}},add:function($input){var existingId=this.existingId($input);existingId||(this.cache[$input.attr("id")]=new GOVUK.registerToVote.Autocomplete($input))},remove:function($input){var existing=this.existingId($input);$input.typeahead("destroy"),existing&&delete this.cache[existing]}},PostcodeLookup=function(searchButton,inputName){var _allowSubmission,inputId=inputName.replace(/\./g,"_"),previousAddressTest=message("ordinary_address_previousAddressTest");_allowSubmission=function($searchButton){var $optionalSectionContainer=$searchButton.closest(".optional-section"),isInOptionalSection=$optionalSectionContainer.length>0,optionalSectionIsHidden=!1;return isInOptionalSection&&(optionalSectionIsHidden="none"===$optionalSectionContainer.css("display")),isInOptionalSection&&optionalSectionIsHidden?!0:this.hasAddresses?!0:!1},this.$searchButton=$(searchButton),this.$searchInput=this.$searchButton.closest("fieldset").find("input.postcode"),this.$targetElement=$("#found-addresses"),this.hasAddresses=$("#"+inputId+"_uprn_select").length>0,this.$waitMessage=$('<p id="wait-for-request">'+message("ordinary_address_loading")+"</p>"),this.addressIsPrevious=-1!==this.$searchInput.siblings("label").text().indexOf(previousAddressTest),this.$searchButton.attr("aria-controls",this.$targetElement.attr("id")),this.$targetElement.attr({"aria-live":"polite","aria-busy":"false",role:"region"}),this.fragment='<label for="'+inputId+'_postcode" class="hidden">'+message("ordinary_address_postcode")+'</label><input type="hidden" id="input-address-postcode" name="'+inputName+'.postcode" value="{{postcode}}" class="text hidden"><label for="'+inputId+'_uprn_select">{{selectLabel}}</label><div class="validation-wrapper"><select id="'+inputId+'_uprn_select" name="'+inputName+'.uprn" class="lonely validate" data-validation-name="addressSelect" data-validation-type="field" data-validation-rules="nonEmpty"><option value="">{{defaultOption}}</option>{{#options}}<option value="{{uprn}}">{{addressLine}}</option>{{/options}}</select></div><div class="optional-section" id="cant-find-address"><h2>{{excuseToggle}}</h2><label for="'+inputId+'_manualAddress">{{excuseLabel}}</label><textarea name="'+inputName+'.manualAddress" id="'+inputId+'_manualAddress" class="small validate" maxlength=500  autocomplete="off" data-validation-name="addressExcuse" data-validation-type="field" data-validation-rules="nonEmpty"></textarea></div><input type="hidden" id="possibleAddresses_postcode" name="possibleAddresses.postcode" value="{{postcode}}" /><input type="hidden" id="possibleAddresses_jsonList" name="possibleAddresses.jsonList" value="{{resultsJSON}}" /><button type="submit" id="continue" class="button next validation-submit" data-validation-sources="postcode address">'+message("ordinary_address_continue")+"</button>",_allowSubmission.apply(this,[this.$searchButton])||$("#continue").hide(),this.bindEvents()},PostcodeLookup.prototype.bindEvents=function(){var _this=this;this.$searchButton.on("click",function(){return _this.getAddresses(),!1})},PostcodeLookup.prototype.onTimeout=function(){},PostcodeLookup.prototype.onError=function(){},PostcodeLookup.prototype.addLookup=function(data,postcode){var $results,addressNum=data.addresses.length,defaultOption=1===addressNum?addressNum+" address found":addressNum+" addresses found",htmlData={postcode:postcode,selectLabel:message("ordinary_address_selectAddress"),defaultOption:defaultOption,options:data.addresses,excuseToggle:message("ordinary_address_excuse"),excuseLabel:"Enter your address",resultsJSON:data.rawJSON};this.addressIsPrevious&&(htmlData.selectLabel=message("ordinary_address_selectPreviousAddress"),htmlData.excuseToggle=message("ordinary_address_previousAddressExcuse"),htmlData.excuseLabel="Enter your previous address"),$results=$(Mustache.render(this.fragment,htmlData)),this.$targetElement.closest(".optional-section-core-content").length||($results=$('<form action="'+window.location+'" method="POST"></form>').append($results)),this.$targetElement.append($results).addClass("contains-addresses"),new GOVUK.registerToVote.OptionalInformation(this.$targetElement.find(".optional-section"),"optional-section"),this.hasAddresses=!0},PostcodeLookup.prototype.getAddresses=function(){var _notifyInvalidPostcode,_clearExistingResults,_setValidation,_this=this,validation=GOVUK.registerToVote.validation,postcode=this.$searchInput.val(),URL="/address/"+postcode.replace(/\s/g,""),fieldValidationName=this.$searchButton.data("validationSources").split(" ");_notifyInvalidPostcode=function(){validation.makeInvalid([{name:"postcode",rule:"postcode",$source:_this.$searchInput}],_this.$searchButton)},_clearExistingResults=function(){""!==_this.$targetElement.html()&&(validation.fields.remove("address"),validation.fields.remove("addressSelect"),validation.fields.remove("addressExcuse"),_this.$targetElement.html(""),$("#continue").remove())},_setValidation=function(){_this.$targetElement.attr({"data-validation-name":"address","data-validation-type":"fieldset","data-validation-rules":"fieldOrExcuse","data-validation-children":"addressSelect addressExcuse"}),_this.$targetElement.find('.validate:not([type="hidden"])').each(function(idx,elm){validation.fields.add($(elm))}),validation.fields.add(_this.$targetElement)},validation.validate(fieldValidationName,_this.$searchButton)===!0&&(this.$waitMessage.insertAfter(this.$searchButton),this.$targetElement.attr("aria-busy","true"),$.ajax({url:URL,dataType:"json",timeout:1e4}).done(function(data,status,xhrObj){return data.rawJSON=xhrObj.responseText,data.addresses.length?(_clearExistingResults(),_this.addLookup(data,postcode),void _setValidation()):void _notifyInvalidPostcode()}).fail(function(xhrObj,status,errorStr){"timeout"===status?_this.onTimeout(xhrObj):_this.onError(status,errorStr)}).always(function(){_this.$waitMessage.remove(),_this.$targetElement.attr("aria-busy","false")}))},monitorRadios=function(){var monitor;return monitor=function(elm){var groupName=elm.name,$fieldset=$(elm).closest("fieldset");-1===$.inArray(groupName,monitor.radioGroups)&&(monitor.radioGroups.push(groupName),$fieldset.on("click change",function(e){var target=e.target;target.type&&"radio"===target.type&&$(document).trigger("radio:"+target.name,{selectedControl:target,fieldset:this})}))},monitor.radioGroups=[],monitor}(),GOVUK.registerToVote.ConditionalControl=ConditionalControl,GOVUK.registerToVote.OptionalControl=OptionalControl,GOVUK.registerToVote.OtherCountryFields=OtherCountryFields,GOVUK.registerToVote.MarkSelected=MarkSelected,GOVUK.registerToVote.Autocomplete=Autocomplete,GOVUK.registerToVote.autocompletes=autocompletes,GOVUK.registerToVote.monitorRadios=monitorRadios,GOVUK.registerToVote.PostcodeLookup=PostcodeLookup,GOVUK.registerToVote.BackButton=BackButton}).call(this);