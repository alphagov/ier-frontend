package uk.gov.gds.ier.validation.constants

import scala.collection.immutable.HashMap

object NationalityConstants {

  def numberMaxOfOtherCountries = 3

  type Franchise = String
  object Franchise {
    def apply(str:String) = {
      require(
        str == fullValue ||
        str == europeanValue ||
        str == commonwealthValue ||
        str == britishTerritoriesValue ||
        str == crownDependenciesValue
      )
      str
    }
    private final val fullValue = "Full"
    private final val europeanValue = "EU"
    private final val commonwealthValue = "Commonwealth"
    private final val britishTerritoriesValue = "British Territories"
    private final val crownDependenciesValue = "British Crown Dependencies"

    final val full = Franchise(fullValue)
    final val european = Franchise(europeanValue)
    final val commonwealth = Franchise(commonwealthValue)
    final val britishTerritories = Franchise(britishTerritoriesValue)
    final val crownDependencies = Franchise(crownDependenciesValue)
  }

  case class ISOCountry(isoCode:String, displayName: String, franchise: Franchise*)

  lazy val countryNameToCodes = HashMap(
    "Afghanistan" -> ISOCountry("AF", displayName = "Afghanistan"),
    "Albania" -> ISOCountry("AL", displayName = "Albania"),
    "Algeria" -> ISOCountry("DZ", displayName = "Algeria"),
    "American Samoa" -> ISOCountry("AS", displayName = "American Samoa"),
    "Andorra" -> ISOCountry("AD", displayName = "Andorra"),
    "Angola" -> ISOCountry("AO", displayName = "Angola"),
    "Anguilla" -> ISOCountry("AI", displayName = "Anguilla", Franchise.britishTerritories),
    "Antigua and Barbuda" -> ISOCountry("AG", displayName = "Antigua and Barbuda", Franchise.commonwealth),
    "Argentina" -> ISOCountry("AR", displayName = "Argentina"),
    "Armenia" -> ISOCountry("AM", displayName = "Armenia"),
    "Aruba" -> ISOCountry("AW", displayName = "Aruba"),
    "Australia" -> ISOCountry("AU", displayName = "Australia", Franchise.commonwealth),
    "Austria" -> ISOCountry("AT", displayName = "Austria", Franchise.european),
    "Azerbaijan" -> ISOCountry("AZ", displayName = "Azerbaijan"),
    "Bahamas" -> ISOCountry("BS", displayName = "Bahamas", Franchise.commonwealth),
    "Bahrain" -> ISOCountry("BH", displayName = "Bahrain"),
    "Bangladesh" -> ISOCountry("BD", displayName = "Bangladesh", Franchise.commonwealth),
    "Barbados" -> ISOCountry("BB", displayName = "Barbados", Franchise.commonwealth),
    "Belarus" -> ISOCountry("BY", displayName = "Belarus"),
    "Belgium" -> ISOCountry("BE", displayName = "Belgium", Franchise.european),
    "Belize" -> ISOCountry("BZ", displayName = "Belize", Franchise.commonwealth),
    "Benin" -> ISOCountry("BJ", displayName = "Benin"),
    "Bermuda" -> ISOCountry("bm", displayName = "Bermuda", Franchise.britishTerritories),
    "Bhutan" -> ISOCountry("BT", displayName = "Bhutan"),
    "Bolivia" -> ISOCountry("BO", displayName = "Bolivia"),
    "Bonaire/St Eustatius/Saba" -> ISOCountry("BQ", displayName = "Bonaire/St Eustatius/Saba"),
    "Bosnia and Herzegovina" -> ISOCountry("BA", displayName = "Bosnia and Herzegovina" ),
    "Botswana" -> ISOCountry("BW", displayName = "Botswana", Franchise.commonwealth),
    "Brazil" -> ISOCountry("BR", displayName = "Brazil"),
    "British Indian Ocean Territory" -> ISOCountry("IO", displayName = "British Indian Ocean Territory", Franchise.britishTerritories),
    "British Virgin Islands" -> ISOCountry("VG", displayName = "British Virgin Islands", Franchise.britishTerritories),
    "Brunei" -> ISOCountry("BN", displayName = "Brunei", Franchise.commonwealth),
    "Bulgaria" -> ISOCountry("BG", displayName = "Bulgaria", Franchise.european),
    "Burkina Faso" -> ISOCountry("BF", displayName = "Burkina Faso"),
    "Burma" -> ISOCountry("MM", displayName = "Burma"),
    "Burundi" -> ISOCountry("BI", displayName = "Burundi"),
    "Cambodia" -> ISOCountry("KH", displayName = "Cambodia"),
    "Cameroon" -> ISOCountry("CM", displayName = "Cameroon", Franchise.commonwealth),
    "Canada" -> ISOCountry("CA", displayName = "Canada", Franchise.commonwealth),
    "Cape Verde" -> ISOCountry("CV", displayName = "Cape Verde"),
    "Cayman Islands" -> ISOCountry("KY", displayName = "Cayman Islands", Franchise.britishTerritories),
    "Central African Republic" -> ISOCountry("CF", displayName = "Central African Republic"),
    "Chad" -> ISOCountry("TD", displayName = "Chad"),
    "Chile" -> ISOCountry("CL", displayName = "Chile"),
    "China" -> ISOCountry("CN", displayName = "China"),
    "Colombia" -> ISOCountry("CO", displayName = "Colombia"),
    "Comoros" -> ISOCountry("KM", displayName = "Comoros"),
    "Congo" -> ISOCountry("CG", displayName = "Congo"),
    "Costa Rica" -> ISOCountry("CR", displayName = "Costa Rica"),
    "Cote d’Ivoire" -> ISOCountry("CI", displayName = "Cote d’Ivoire"),
    "Croatia" -> ISOCountry("HR", displayName = "Croatia", Franchise.european),
    "Cuba" -> ISOCountry("CU", displayName = "Cuba"),
    "Curaçao" -> ISOCountry("CW", displayName = "Curaçao"),
    "Cyprus" -> ISOCountry("CY", displayName = "Cyprus", Franchise.european, Franchise.commonwealth),
    "Czech Republic" -> ISOCountry("CZ", displayName = "Czech Republic", Franchise.european),
    "Democratic Republic of Congo" -> ISOCountry("CD", displayName = "Democratic Republic of Congo"),
    "Denmark" -> ISOCountry("DK", displayName = "Denmark", Franchise.european),
    "Djibouti" -> ISOCountry("DJ", displayName = "Djibouti"),
    "Dominica" -> ISOCountry("DM", displayName = "Dominica", Franchise.commonwealth),
    "Dominican Republic" -> ISOCountry("DO", displayName = "Dominican Republic"),
    "Ecuador" -> ISOCountry("EC", displayName = "Ecuador"),
    "Egypt" -> ISOCountry("EG", displayName = "Egypt"),
    "El Salvador" -> ISOCountry("SV", displayName = "El Salvador"),
    "Equatorial Guinea" -> ISOCountry("GQ", displayName = "Equatorial Guinea"),
    "Eritrea" -> ISOCountry("ER", displayName = "Eritrea"),
    "Estonia" -> ISOCountry("EE", displayName = "Estonia", Franchise.european),
    "Ethiopia" -> ISOCountry("ET", displayName = "Ethiopia"),
    "Falkland Islands" -> ISOCountry("FK", displayName = "Falkland Islands", Franchise.britishTerritories),
    "Fiji" -> ISOCountry("FJ", displayName = "Fiji", Franchise.commonwealth),
    "Finland" -> ISOCountry("FI", displayName = "Finland", Franchise.european),
    "France" -> ISOCountry("FR", displayName = "France", Franchise.european),
    "French Guiana" -> ISOCountry("GF", displayName = "French Guiana"),
    "French Polynesia" -> ISOCountry("PF", displayName = "French Polynesia"),
    "Gabon" -> ISOCountry("GA", displayName = "Gabon"),
    "Gambia" -> ISOCountry("GM", displayName = "Gambia", Franchise.commonwealth),
    "Georgia" -> ISOCountry("GE", displayName = "Georgia"),
    "Germany" -> ISOCountry("DE", displayName = "Germany", Franchise.european),
    "Ghana" -> ISOCountry("GH", displayName = "Ghana", Franchise.commonwealth),
    "Gibraltar" -> ISOCountry("GI", displayName = "Gibraltar", Franchise.britishTerritories),
    "Greece" -> ISOCountry("GR", displayName = "Greece", Franchise.european),
    "Grenada" -> ISOCountry("GD", displayName = "Grenada", Franchise.commonwealth),
    "Guadeloupe" -> ISOCountry("GP", displayName = "Guadeloupe"),
    "Guatemala" -> ISOCountry("GT", displayName = "Guatemala"),
    "Guernsey" -> ISOCountry("GG", displayName = "Guernsey"),
    "Guinea" -> ISOCountry("GN", displayName = "Guinea"),
    "Guinea-Bissau" -> ISOCountry("GW", displayName = "Guinea-Bissau"),
    "Guyana" -> ISOCountry("GY", displayName = "Guyana", Franchise.commonwealth),
    "Haiti" -> ISOCountry("HT", displayName = "Haiti"),
    "Holy See" -> ISOCountry("VA", displayName = "Holy See"),
    "Honduras" -> ISOCountry("HN", displayName = "Honduras"),
    "Hong Kong" -> ISOCountry("HK", displayName = "Hong Kong", Franchise.full),
    "Hungary" -> ISOCountry("HU", displayName = "Hungary", Franchise.european),
    "Iceland" -> ISOCountry("IS", displayName = "Iceland"),
    "India" -> ISOCountry("IN", displayName = "India", Franchise.commonwealth),
    "Indonesia" -> ISOCountry("ID", displayName = "Indonesia"),
    "Iran" -> ISOCountry("IR", displayName = "Iran"),
    "Iraq" -> ISOCountry("IQ", displayName = "Iraq"),
    "Ireland" -> ISOCountry("IE", displayName = "Ireland", Franchise.full, Franchise.european),
    "Isle of Man" -> ISOCountry("IM", displayName = "Isle of Man"),
    "Israel" -> ISOCountry("IL", displayName = "Israel"),
    "Italy" -> ISOCountry("IT", displayName = "Italy", Franchise.european),
    "Jamaica" -> ISOCountry("JM", displayName = "Jamaica", Franchise.commonwealth),
    "Japan" -> ISOCountry("JP", displayName = "Japan"),
    "Jersey" -> ISOCountry("JE", displayName = "Jersey"),
    "Jordan" -> ISOCountry("JO", displayName = "Jordan"),
    "Kazakhstan" -> ISOCountry("KZ", displayName = "Kazakhstan"),
    "Kenya" -> ISOCountry("KE", displayName = "Kenya", Franchise.commonwealth),
    "Kiribati" -> ISOCountry("KI", displayName = "Kiribati", Franchise.commonwealth),
    "Kosovo" -> ISOCountry("XK", displayName = "Kosovo"),
    "Kuwait" -> ISOCountry("KW", displayName = "Kuwait"),
    "Kyrgyzstan" -> ISOCountry("KG", displayName = "Kyrgyzstan"),
    "Laos" -> ISOCountry("LA", displayName = "Laos"),
    "Latvia" -> ISOCountry("LV", displayName = "Latvia", Franchise.european),
    "Lebanon" -> ISOCountry("LB", displayName = "Lebanon"),
    "Lesotho" -> ISOCountry("LS", displayName = "Lesotho", Franchise.commonwealth),
    "Liberia" -> ISOCountry("LR", displayName = "Liberia"),
    "Libya" -> ISOCountry("LY", displayName = "Libya"),
    "Liechtenstein" -> ISOCountry("LI", displayName = "Liechtenstein"),
    "Lithuania" -> ISOCountry("LT", displayName = "Lithuania", Franchise.european),
    "Luxembourg" -> ISOCountry("LU", displayName = "Luxembourg", Franchise.european),
    "Macao" -> ISOCountry("MO", displayName = "Macao"),
    "Macedonia" -> ISOCountry("MK", displayName = "Macedonia"),
    "Madagascar" -> ISOCountry("MG", displayName = "Madagascar"),
    "Malawi" -> ISOCountry("MW", displayName = "Malawi", Franchise.commonwealth),
    "Malaysia" -> ISOCountry("MY", displayName = "Malaysia", Franchise.commonwealth),
    "Maldives" -> ISOCountry("MV", displayName = "Maldives", Franchise.commonwealth),
    "Mali" -> ISOCountry("ML", displayName = "Mali"),
    "Malta" -> ISOCountry("MT", displayName = "Malta", Franchise.european, Franchise.commonwealth),
    "Marshall Islands" -> ISOCountry("MH", displayName = "Marshall Islands"),
    "Martinique" -> ISOCountry("MQ", displayName = "Martinique"),
    "Mauritania" -> ISOCountry("MR", displayName = "Mauritania"),
    "Mauritius" -> ISOCountry("MU", displayName = "Mauritius", Franchise.commonwealth),
    "Mayotte" -> ISOCountry("YT", displayName = "Mayotte"),
    "Mexico" -> ISOCountry("MX", displayName = "Mexico"),
    "Micronesia" -> ISOCountry("FM", displayName = "Micronesia"),
    "Moldova" -> ISOCountry("MD", displayName = "Moldova"),
    "Monaco" -> ISOCountry("MC", displayName = "Monaco"),
    "Mongolia" -> ISOCountry("MN", displayName = "Mongolia"),
    "Montenegro" -> ISOCountry("ME", displayName = "Montenegro"),
    "Montserrat" -> ISOCountry("MS", displayName = "Montserrat", Franchise.britishTerritories),
    "Morocco" -> ISOCountry("MA", displayName = "Morocco"),
    "Mozambique" -> ISOCountry("MZ", displayName = "Mozambique", Franchise.commonwealth),
    "Namibia" -> ISOCountry("NA", displayName = "Namibia", Franchise.commonwealth),
    "Nauru" -> ISOCountry("NR", displayName = "Nauru", Franchise.commonwealth),
    "Nepal" -> ISOCountry("NP", displayName = "Nepal"),
    "Netherlands" -> ISOCountry("NL", displayName = "Netherlands", Franchise.european),
    "New Caledonia" -> ISOCountry("NC", displayName = "New Caledonia"),
    "New Zealand" -> ISOCountry("NZ", displayName = "New Zealand", Franchise.commonwealth),
    "Nicaragua" -> ISOCountry("NI", displayName = "Nicaragua"),
    "Niger" -> ISOCountry("NE", displayName = "Niger"),
    "Nigeria" -> ISOCountry("NG", displayName = "Nigeria", Franchise.commonwealth),
    "North Korea" -> ISOCountry("KP", displayName = "North Korea"),
    "Norway" -> ISOCountry("NO", displayName = "Norway"),
    "Oman" -> ISOCountry("OM", displayName = "Oman"),
    "Pakistan" -> ISOCountry("PK", displayName = "Pakistan", Franchise.commonwealth),
    "Palau" -> ISOCountry("PW", displayName = "Palau"),
    "Panama" -> ISOCountry("PA", displayName = "Panama"),
    "Papua New Guinea" -> ISOCountry("PG", displayName = "Papua New Guinea", Franchise.commonwealth),
    "Paraguay" -> ISOCountry("PY", displayName = "Paraguay"),
    "Peru" -> ISOCountry("PE", displayName = "Peru"),
    "Philippines" -> ISOCountry("PH", displayName = "Philippines"),
    "Pitcairn Island" -> ISOCountry("PN", displayName = "Pitcairn Island", Franchise.britishTerritories),
    "Poland" -> ISOCountry("PL", displayName = "Poland", Franchise.european),
    "Portugal" -> ISOCountry("PT", displayName = "Portugal", Franchise.european),
    "Qatar" -> ISOCountry("QA", displayName = "Qatar"),
    "Réunion" -> ISOCountry("RE", displayName = "Réunion"),
    "Romania" -> ISOCountry("RO", displayName = "Romania", Franchise.european),
    "Russia" -> ISOCountry("RU", displayName = "Russia"),
    "Rwanda" -> ISOCountry("RW", displayName = "Rwanda", Franchise.commonwealth),
    "Samoa" -> ISOCountry("WS", displayName = "Samoa", Franchise.commonwealth),
    "San Marino" -> ISOCountry("SM", displayName = "San Marino"),
    "São Tomé and Principe" -> ISOCountry("ST", displayName = "São Tomé and Principe"),
    "Saudi Arabia" -> ISOCountry("SA", displayName = "Saudi Arabia"),
    "Senegal" -> ISOCountry("SN", displayName = "Senegal"),
    "Serbia" -> ISOCountry("RS", displayName = "Serbia"),
    "Seychelles" -> ISOCountry("SC", displayName = "Seychelles", Franchise.commonwealth),
    "Sierra Leone" -> ISOCountry("SL", displayName = "Sierra Leone", Franchise.commonwealth),
    "Singapore" -> ISOCountry("SG", displayName = "Singapore", Franchise.commonwealth),
    "Slovakia" -> ISOCountry("SK", displayName = "Slovakia", Franchise.european),
    "Slovenia" -> ISOCountry("SI", displayName = "Slovenia", Franchise.european),
    "Solomon Islands" -> ISOCountry("SB", displayName = "Solomon Islands", Franchise.commonwealth),
    "Somalia" -> ISOCountry("SO", displayName = "Somalia"),
    "South Africa" -> ISOCountry("ZA", displayName = "South Africa", Franchise.commonwealth),
    "South Georgia and the South Sandwich Islands" -> ISOCountry("GS", displayName = "South Georgia and the South Sandwich Islands", Franchise.britishTerritories),
    "South Korea" -> ISOCountry("KR", displayName = "South Korea"),
    "South Sudan" -> ISOCountry("SS", displayName = "South Sudan"),
    "Spain" -> ISOCountry("ES", displayName = "Spain", Franchise.european),
    "Sri Lanka" -> ISOCountry("LK", displayName = "Sri Lanka", Franchise.commonwealth),
    "St Helena, Ascension and Tristan da Cunha" -> ISOCountry("SH", displayName = "St Helena, Ascension and Tristan da Cunha", Franchise.britishTerritories),
    "St Kitts and Nevis" -> ISOCountry("KN", displayName = "St Kitts and Nevis", Franchise.commonwealth),
    "St Lucia" -> ISOCountry("LC", displayName = "St Lucia", Franchise.commonwealth),
    "St Maarten" -> ISOCountry("MF", displayName = "St Maarten"),
    "St Pierre & Miquelon" -> ISOCountry("PM", displayName = "St Pierre & Miquelon"),
    "St Vincent and the Grenadines" -> ISOCountry("VC", displayName = "St Vincent and The Grenadines", Franchise.commonwealth),
    "Sudan" -> ISOCountry("SD", displayName = "Sudan"),
    "Suriname" -> ISOCountry("SR", displayName = "Suriname"),
    "Swaziland" -> ISOCountry("SZ", displayName = "Swaziland", Franchise.commonwealth),
    "Sweden" -> ISOCountry("SE", displayName = "Sweden", Franchise.european),
    "Switzerland" -> ISOCountry("CH", displayName = "Switzerland"),
    "Syria" -> ISOCountry("SY", displayName = "Syria"),
    "Taiwan" -> ISOCountry("TW", displayName = "Taiwan"),
    "Tajikistan" -> ISOCountry("TJ", displayName = "Tajikistan"),
    "Tanzania" -> ISOCountry("TZ", displayName = "Tanzania", Franchise.commonwealth),
    "Thailand" -> ISOCountry("TH", displayName = "Thailand"),
    "The Occupied Palestinian Territories" -> ISOCountry("PS", displayName = "The Occupied Palestinian Territories"),
    "Timor Leste" -> ISOCountry("TL", displayName = "Timor Leste"),
    "Togo" -> ISOCountry("TG", displayName = "Togo"),
    "Tonga" -> ISOCountry("TO", displayName = "Tonga", Franchise.commonwealth),
    "Trinidad and Tobago" -> ISOCountry("TT", displayName = "Trinidad and Tobago", Franchise.commonwealth),
    "Tunisia" -> ISOCountry("TN", displayName = "Tunisia"),
    "Turkey" -> ISOCountry("TR", displayName = "Turkey"),
    "Turkmenistan" -> ISOCountry("TM", displayName = "Turkmenistan"),
    "Turks and Caicos Islands" -> ISOCountry("TC", displayName = "Turks and Caicos Islands", Franchise.britishTerritories),
    "Tuvalu" -> ISOCountry("TV", displayName = "Tuvalu", Franchise.commonwealth),
    "Uganda" -> ISOCountry("UG", displayName = "Uganda", Franchise.commonwealth),
    "Ukraine" -> ISOCountry("UA", displayName = "Ukraine"),
    "United Arab Emirates" -> ISOCountry("AE", displayName = "United Arab Emirates"),
    "United Kingdom" -> ISOCountry("GB", displayName = "United Kingdom", Franchise.full, Franchise.european, Franchise.commonwealth),
    "Uruguay" -> ISOCountry("UY", displayName = "Uruguay"),
    "United States of America" -> ISOCountry("US", displayName = "United States of America"),
    "Uzbekistan" -> ISOCountry("UZ", displayName = "Uzbekistan"),
    "Vanuatu" -> ISOCountry("VU", displayName = "Vanuatu", Franchise.commonwealth),
    "Venezuela" -> ISOCountry("VE", displayName = "Venezuela"),
    "Vietnam" -> ISOCountry("VN", displayName = "Vietnam"),
    "Wallis and Futuna" -> ISOCountry("WF", displayName = "Wallis and Futuna"),
    "Western Sahara" -> ISOCountry("EH", displayName = "Western Sahara"),
    "Yemen" -> ISOCountry("YE", displayName = "Yemen"),
    "Zambia" -> ISOCountry("ZM", displayName = "Zambia", Franchise.commonwealth),
    "Zimbabwe" -> ISOCountry("ZW", displayName = "Zimbabwe", Franchise.commonwealth)
  )




  lazy val countriesExceptUK = countryNameToCodes.filterNot {
    case (name, iso) => iso.isoCode == "GB"
  }

  lazy val validNationalitiesList = countryNameToCodes.filterNot {
    case (name, iso) => List("GB", "GG", "IM", "JE").contains(iso.isoCode)
  }
}
